# -*- coding: utf-8 -*-
"""
Created on Fri Apr  1 10:42:35 2022

@author: Mikkel Hviid Thorn

Examples on how to use the module compute_linear_codes or CLC.
"""

import numpy as np
import matplotlib.pyplot as plt
import compute_linear_codes as CLC



"""
Example 1:
  - In this example we consider a field with 2 elements and represent the 
    elements with integers. The length of our words is 8.
  - This example require the least of us, when using the functions.
"""

# Generator matrix of our code
#G1 = [[1,0,0,0,1,1,1,0],
#     [0,1,0,0,1,1,0,1],
#     [0,0,1,0,1,0,1,1],
#     [0,0,0,1,0,1,1,1]]

# Code of the generator matrix G1 
#C1 = CLC.subS(G1)

# Dual code of the code C1
#D1 = CLC.dualS(G1)

# Minimum distance of the code C1
#d1 = CLC.min_d(G1)


# Printing the result
#print('Our Generator Matrix','\n',np.array(G1),'\n')

#print('The Code Generated By The Generator Matrix','\n',np.array(C1),'\n')

#print('The Dual Code','\n',np.array(D1),'\n') 

#print('The Minimum Distance','\n',np.array(d1),'\n')  



"""
Example 2:
  - In this example we consider a field with 4 elements and represent the 
    elements with strings. The length of our words is 5.
  - This example require alot of us, since we need to define the symbols 
    (strings) used to represent our elements in the field and define a
    special addition and multiplication using our notation.
  - Our notation is defined in the set Symbol and our addition and 
    multiplication are the functions A4 and M4.
"""

# Set of elements
#Symbol = ['0','1','a','a+1']

# Generator matrix of our code
#G2 = [['a','1','0','0','a+1'],
#     ['0','a+1','0','a+1','a'],
#     ['0','0','a','a','0']]

# Code of the generator matrix G2 
#C2 = CLC.subS(G2,S=Symbol,a=CLC.A4,m=CLC.M4)

# Dual code of the code C2
#D2 = CLC.dualS(G2,S=Symbol,a=CLC.A4,m=CLC.M4)

# Minimum distance of the code C2
#d2 = CLC.min_d(G2,S=Symbol,a=CLC.A4,m=CLC.M4)


# Printing the result
#print('Our Generator Matrix','\n',np.array(G2),'\n')

#print('The Code Generated By The Generator Matrix','\n',np.array(C2),'\n')

#print('The Dual Code','\n',np.array(D2),'\n') 

#print('The Minimum Distance','\n',np.array(d2),'\n')  



"""
Example 3:
  - In this example we consider a field with 9 elements and represent the 
    elements with polynomials as tuples. The length of our words is 4.
  - This example require that we have a monic irreducible polynomial, which
    can be used to create the necessary quotient space.
  - Our monic irreducible polynomial is (1,0,1) and noted as D.
"""

# Generator matrix of our code
#G3 = [[(2,1),(0,1),(0,1),(1,1)],
#     [(0,0),(2,0),(1,1),(0,1)]]

# Code of the generator matrix G3
#C3 = CLC.subS(G3,p=3,D=(1,0,1),a=CLC.AA,m=CLC.MM)

# Dual code of the code C3
#D3 = CLC.dualS(G3,p=3,D=(1,0,1),a=CLC.AA,m=CLC.MM)

# Minimum distance of the code C3
#d3 = CLC.min_d(G3,p=3,D=(1,0,1),a=CLC.AA,m=CLC.MM)

# Printing the result
#print('Our Generator Matrix','\n',np.array(G3),'\n')

#print('The Code Generated By The Generator Matrix','\n',np.array(C3),'\n')

#print('The Dual Code','\n',np.array(D3),'\n') 

#print('The Minimum Distance','\n',np.array(d3),'\n')    



"""
Example 4:
  - In this example we create a parity check matrix for a Hamming code with
    length 7, dimension 4 over the field with two elements.
"""

# Printing the result
#print('The parity check matrix for a Hamming code','\n',np.array(CLC.hamming(3,p=5)),'\n')

